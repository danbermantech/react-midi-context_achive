{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * @module MIDIContext\n */\n\nimport React, {\n  useMemo, createContext, useContext, useReducer, useCallback, useRef, useState, useEffect\n} from 'react';\n\n/**\n * @typedef {string} StatusByte\n * @property {number} noteOff - 0x8\n * @property {number} noteOn - 0x9\n * @property {number} afterTouch - 0xA\n * @property {number} controlChange - 0xB\n * @property {number} programChange - 0xC\n * @property {number} channelPressure - 0xD\n * @property {number} pitchWheel - 0xE\n */\n\nfunction translateTypeToStatusByte(type: string): number{\n  switch(type){\n    case('noteOff'): return 0x80;\n    case('noteOn'): return 0x90;\n    case('afterTouch'): 0xA0;\n    case('cc'): return 0xB0;\n    case('controlChange'): return 0xB0;\n    case('programChange'): return 0xC0;\n    case('channelPressure'): return 0xD0;\n    case('pitchWheel'): return 0xE0;\n    default: return 0x00;\n  }\n};\n\n/**\n * @function sendMIDIMessage\n * @param {Object} props\n * @param {int} props.channel\n * @param {int} props.cc\n * @param {int} props.value\n * @param {int} props.pitch\n * @param {MIDIOutput} props.device\n * @param {StatusByte} props.type\n * @param {boolean} props.log\n * @returns {string}\n */\n\nexport interface MIDIPort{\n  connection: string;\n  id: string;\n  manufacturer: string;\n  onstatechange?: Function;\n  name?: string;\n  state: string;\n  type: string;\n  version: string;\n}\n\nexport interface MIDIOutput extends MIDIPort{\n  send: Function;\n}\n\n\n\nexport interface MIDICommand {\n  channel?: number;\n  cc?: number ;\n  value?: number;\n  velocity?: number;\n  pitch?: number;\n  device?: MIDIOutput | MIDIOutput[];\n  type?: string;\n  log?: boolean;\n}\n\nfunction sendMIDIMessage(props: MIDICommand): string {\n  const {\n    channel,\n    cc,\n    value,\n    pitch,\n    device,\n    type='cc',\n    log,\n  } = props;\n\n  const firstStatusByte = translateTypeToStatusByte(type);\n  const statusBytes = firstStatusByte + (channel ?? 0);\n  const msg = [statusBytes, pitch || (cc || 0), value || 0];\n  if (device) {\n    if (device.constructor === Array) {\n      device.forEach((d) => d?.send(msg));\n      return `messages sent successfully to multiple outputs : ${msg}`;\n    }\n    if(!Array.isArray(device)){\n      try{\n        device.send(msg);\n      }catch(error){\n        if(log) console.warn(error);\n        return 'an error occured.'\n      }\n      return `MIDI message successfully sent : ${msg}`;\n    }\n  }\n  return 'No device specified';\n}\n\n/**\n * @param {Event} event - a MIDI input event\n * @returns {Object} Object `{data: event.data, timeStamp: event.timeStamp, str: str}`\n */\nfunction onMIDIMessage(event:Event|any): object {\n  let str = '';\n  for (let i = 0; i < event.data.length; i += 1) {\n    str += `0x${event.data[i].toString(16)} `;\n  }\n  return { data: event.data, timeStamp: event.timeStamp, str };\n}\n\n/**\n * @param {MIDIInput} props.input - an input from the MIDIAccess object\n * @returns {MIDIInput}\n */\n\nexport interface MIDIInput extends MIDIPort{\n  onmidimessage?: Function;\n  open: Function;\n  close: Function;\n}\nasync function openMIDIInput (props:{input:MIDIInput, callback?:Function}): Promise<MIDIInput | Error> {\n  const { input, callback } = props;\n  if (typeof (input) !== 'object') return new Error('No input supplied');\n  if (input.connection === 'open' && !callback) return input;\n  input.onmidimessage = (msg:Event) => onMIDIMessage(msg);\n  if (typeof (callback) === 'function') {\n    const cb = (msg:Event) => {\n      const message = onMIDIMessage(msg);\n      const stateObj = { relVal: 'mostRecentMessage', input: message };\n      callback(stateObj);\n    };\n    input.onmidimessage = (msg:Event) => cb(msg);\n  }\n  await input.open();\n  return input;\n}\n\n/**\n * @description Closes and returns the input\n * @param {MIDIInput} input\n * @returns {MIDIInput}\n */\nasync function closeMIDIInput(input:MIDIInput): Promise<MIDIInput> {\n  await input.close();\n  return input;\n}\n\n\nexport interface MIDIActions {\n  initializeMIDI:Function;\n  openMIDIInput:Function;\n  onMIDIMessage:Function;\n  sendMIDIMessage:Function;\n  sendMIDICC:Function;\n  sendMIDINoteOn:Function;\n  sendMIDINoteOff:Function;\n  getMIDIValue:Function;\n  midiAccess:Object;\n  midiInputs:Array<MIDIInput>;\n  midiOutputs:Array<MIDIOutput>;\n  connectedMIDIInputs:Array<MIDIInput>;\n  addMIDIInput:Function;\n  removeMIDIInput:Function;\n  connectedMIDIOutputs:Array<MIDIOutput>;\n  setConnectedMIDIOutputs:Function;\n  addMIDIOutput:Function;\n  removeMIDIOutput:Function;\n  subscribe:Function\n}\n\nconst MIDIContext:React.Context<any> = createContext({\n  initializeMIDI:function(){},\n  openMIDIInput:function(){},\n  onMIDIMessage:function(){},\n  sendMIDIMessage:function(){},\n  sendMIDICC:function(){},\n  sendMIDINoteOn:function(){},\n  sendMIDINoteOff:function(){},\n  midiAccess:{},\n  midiInputs:[],\n  midiOutputs:[],\n  connectedMIDIInputs:[],\n  addMIDIInput:function(){},\n  removeMIDIInput:function(){},\n  connectedMIDIOutputs:[],\n  setConnectedMIDIOutputs:function(){},\n  addMIDIOutput:function(){},\n  removeMIDIOutput:function(){},\n});\n\n\n\nfunction useStoreData() {\n  const store:React.MutableRefObject<{\n    byDevice:any,\n    byChannel:any\n}> = useRef({ byDevice: {}, byChannel: {} });\n\n  const get = useCallback((props?:{channel?:number; cc?:number; device?:MIDIInput|MIDIOutput}) =>{\n    if (!props) return store.current;\n    const { channel, cc, device } = props;\n    if (device) {\n      return [...store.current.byDevice[device.id]].filter((record) => {\n        if (channel && (record.channel !== channel)) return false;\n        if (cc && (record.cc !== cc)) return false;\n        return true;\n      });\n    }\n    if(!channel) return store.current;\n    if (!cc) return store.current.byChannel[channel];\n    return store.current.byChannel[channel][cc];\n  },[]);\n  const set = useCallback((value:{channel:number, cc:number, value:number, device:MIDIPort}) => {\n    store.current = {\n      byChannel: {\n        ...store.current.byChannel,\n        [value.channel]: {\n          ...store.current.byChannel[value.channel],\n          [value.cc]: value.value,\n        },\n      },\n      byDevice: {\n        ...store.current.byDevice,\n        [value.device.id]: {\n          ...store.current.byDevice[value.device.id],\n          [value.channel]: {\n            ...store.current.byDevice[value.device.id]?.[value.channel],\n            [value.cc]: value.value,\n          },\n        },\n      },\n    };\n  },[]);\n  const subscribers = useRef(new Set());\n\n  const subscribe = useCallback((callback:Function) => {\n    subscribers.current.add(callback);\n    return () => subscribers.current.delete(callback);\n  },[subscribers]);\n\n  return {\n    get,\n    set,\n    subscribe,\n  };\n}\n\n\nfunction MIDIProvider(props:{children:React.ReactNode}):JSX.Element {\n  const { children } = props;\n\n  function reducer(state:Array<MIDIPort | MIDIInput | MIDIOutput>, action:any) {\n    switch (action.type) {\n      case 'add':\n        return [...new Set([...state, action.value])];\n      case 'remove':\n        return state.filter((item) => (!(action.value.id === item.id)));\n      default:\n        throw new Error();\n    }\n  }\n\n  const [connectedMIDIInputs, setConnectedMIDIInputs] = useReducer(reducer, []);\n  const [connectedMIDIOutputs, setConnectedMIDIOutputs] = useReducer(reducer, []);\n  const { get: getMIDIValue, set: setMIDIValue, subscribe } = useStoreData();\n  \n  const [midiAccess, setMIDIAccess] = useState({});\n  const [midiInputs, setMIDIInputs] = useState([]);\n  const [midiOutputs, setMIDIOutputs] = useState([]);\n  useEffect(()=>{\n    initializeMIDI();\n  }, [])\n\n  /**\n * @function initializeMIDI\n * @returns {object} an object with midi inputs and outputs\n */ \n\nasync function initializeMIDI():Promise<{midiAccess:any; midiInputs:Array<MIDIInput>; midiOutputs:Array<MIDIOutput>}> {\n  if (!('requestMIDIAccess' in navigator)) return Promise.reject(new Error('MIDI is not supported in this browser.'));\n  //@ts-ignore\n  const tempMidiAccess = await navigator.requestMIDIAccess();\n  setMIDIAccess(()=>tempMidiAccess);\n  const tmpInputs = [...tempMidiAccess.inputs].map((input) => (input[1]))\n  //@ts-ignore\n  setMIDIInputs(()=>tmpInputs);\n  const tmpOutputs = [...tempMidiAccess.outputs].map((output) => (output[1]))\n  //@ts-ignore\n  setMIDIOutputs(()=>tmpOutputs);\n  return { midiAccess, midiInputs, midiOutputs };\n}\n\n\n  /**\n   * @function addMIDIInput\n   * @param {MIDIInput} input - the input to add\n   */\n  const addMIDIInput = useCallback(async (input: MIDIInput, callback?: Function):Promise<boolean> => {\n    try {\n      if(!('inputs' in midiAccess)) throw new Error('inputs not available.');\n      await openMIDIInput({input, callback});\n      setConnectedMIDIInputs({ type: 'add', value: input });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }, [midiInputs, midiAccess, connectedMIDIInputs]);\n\n  /**\n   * @function removeMIDIInput\n   * @param {MIDIInput} input - the input to remove\n   */\n\n  const removeMIDIInput = useCallback((input:MIDIInput):boolean => {\n    try {\n      closeMIDIInput(input);\n      setConnectedMIDIInputs({ type: 'remove', value: input });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }, [midiInputs, midiAccess, connectedMIDIInputs]);\n\n  /**\n   * @function addMIDIOutput\n   * @param {MIDIOutput} output - the output to add\n   */\n\n  const addMIDIOutput = useCallback((output:MIDIOutput) => {\n    try {\n      if(!('outputs' in midiAccess)) throw new Error('outputs not available.')\n      sendMIDINoteOff({device:output, pitch: 1, channel:1})\n      setConnectedMIDIOutputs({ type: 'add', value: output });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }, [midiOutputs, midiAccess, connectedMIDIOutputs]);\n\n  /**\n   * @function removeMIDIOutput\n   * @param {MIDIOutput} output - the output to remove\n   */\n\n  const removeMIDIOutput = useCallback((output:MIDIOutput) => {\n    try {\n      setConnectedMIDIOutputs({ type: 'remove', value: output });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }, [midiOutputs, midiAccess, connectedMIDIOutputs]);\n\n  /**\n   * @function sendMIDICC\n   * @param {number} args.channel - the channel to send the command on\n   * @param {number} args.cc - the CC# to send the command on\n   * @param {number} args.value = the value to send\n   * @param {MIDIOutput} args.device - the device to send the command on\n   */\n\n  const sendMIDICC = useCallback((args:{channel:number, cc:number, value:number, device:MIDIOutput}) => {\n    const {\n      channel, cc, value, device,\n    } = args;\n    if (typeof(channel) !== 'number') throw new Error(`no channel provided for cc. Expected a number and received ${channel}`);\n    if (typeof(cc) !== 'number') throw new Error(`no cc# provided for cc. Expected a number and received ${cc}`);\n    if (typeof(value) !=='number') throw new Error(`no value provided for cc. Expected a number and received ${value}`);\n    if (!device) throw new Error(`no device provided for cc. Expected a MIDIOutputDevice and recieved ${device}`);\n    sendMIDIMessage({\n      channel, cc, value, device, type: 'cc',\n    });\n    setMIDIValue({\n      channel, cc, value, device,\n    });\n  }, [connectedMIDIOutputs, sendMIDIMessage]);\n\n  /**\n   * @function sendMIDINoteOn\n   * @param {number} args.channel - the channel to send the command on\n   * @param {number} args.pitch - the pitch to send\n   * @param {number} [args.value] = the value to send\n   * @param {number} [args.velocity] - alias of value\n   * @param {MIDIOutput} args.device - the device to send the command on\n   */\n\n  const sendMIDINoteOn = useCallback((args:{channel:number, pitch:number, value?:number, velocity?:number, device:MIDIOutput}) => {\n    const {\n      channel, pitch, value, device, velocity,\n    } = args;\n    if (typeof(channel) !== 'number') throw new Error(`no channel provided for noteOn. Expected a number and received ${channel}`);\n    if (typeof(pitch) !== 'number') throw new Error(`no pitch provided for noteOn. Expected a number and received ${pitch}`);\n    if (typeof(velocity) !== 'number' && typeof(value) !== 'number') throw new Error(`no value/velocity provided for noteOn. Expected a number and received ${velocity ?? value}`);\n    if (!device) throw new Error(`no device provided for noteOn. Expected a MIDIOutputDevice and recieved ${device}`);\n    sendMIDIMessage({\n      channel, pitch, value: value ?? velocity, device, type: 'noteOn',\n    });\n  }, [connectedMIDIOutputs, sendMIDIMessage]);\n\n  /**\n   * @function sendMIDINoteOff\n   * @param {number} args.channel - the channel to send the command on\n   * @param {number} args.pitch - the pitch to send\n   * @param {MIDIOutput} args.device - the device to send the command on\n   */\n  const sendMIDINoteOff = useCallback((args:{channel:number, pitch:number, device:MIDIOutput}) => {\n    const {\n      channel, pitch, device,\n    } = args;\n    if (typeof(channel) !== 'number') throw new Error(`no channel provided for noteOff. Expected a number and received ${channel}`);\n    if (typeof(pitch) !== 'number') throw new Error(`no pitch provided for noteOff. Expected a number and received ${pitch}`);\n    if (!device) throw new Error(`no device provided for noteOff. Expected a MIDIOutputDevice and received ${device}`);\n    sendMIDIMessage({\n      channel, pitch, value: 0, device, type: 'noteOff',\n    });\n  }, [connectedMIDIOutputs, sendMIDIMessage]);\n  const value = useMemo(():MIDIActions => ({\n    initializeMIDI,\n    openMIDIInput,\n    onMIDIMessage,\n    getMIDIValue,\n    sendMIDIMessage,\n    sendMIDICC,\n    sendMIDINoteOn,\n    sendMIDINoteOff,\n    midiAccess,\n    midiInputs,\n    midiOutputs,\n    connectedMIDIInputs,\n    addMIDIInput,\n    removeMIDIInput,\n    connectedMIDIOutputs,\n    setConnectedMIDIOutputs,\n    addMIDIOutput,\n    removeMIDIOutput,\n    subscribe,\n  }), [midiInputs, midiOutputs, connectedMIDIInputs, connectedMIDIOutputs, midiAccess]);\n  return (\n    <MIDIContext.Provider value={value}>\n      {children}\n    </MIDIContext.Provider>\n  );\n}\n\nfunction useMIDIContext():{\n  initializeMIDI:Function,\n  openMIDIInput:Function,\n  onMIDIMessage:Function,\n  sendMIDIMessage:Function,\n  sendMIDICC:Function,\n  sendMIDINoteOn:Function,\n  sendMIDINoteOff:Function,\n  midiAccess:Object,\n  midiInputs:Array<MIDIInput>,\n  midiOutputs:Array<MIDIOutput>,\n  connectedMIDIInputs:Array<MIDIInput>,\n  connectedMIDIOutputs:Array<MIDIOutput>,\n  addMIDIInput:Function,\n  removeMIDIInput:Function,\n  setConnectedMIDIOutputs:Function,\n  addMIDIOutput:Function,\n  removeMIDIOutput:Function,\n  subscribe:Function,}{\n  return useContext(MIDIContext)\n}\n\n\n/**\n * @function useMIDI\n * @param {object} props\n * @param {int} [props.channel]\n * @param {int} [props.cc]\n * @param {MIDIOutput} [props.device]\n * @returns {object}\n */\n\nfunction useMIDI():MIDIActions;\nfunction useMIDI(props:{channel?:number, cc?:number, device?:MIDIOutput}): MIDIActions\n\nfunction useMIDI(props?:{channel?:number, cc?:number, device?:MIDIOutput}){\n  if (!props || !('channel' in props && 'cc' in props && 'device' in props)) return useMIDIContext();\n  const { channel, cc, device } = props;\n  const send = (value:number) => {\n    sendMIDIMessage({\n      channel, cc, value, device, type:'cc'\n    });\n  };\n  return {\n    sendMIDIMessage: send,\n  };\n}\n\nfunction useMIDIOutput(requestedDevice: number | string):{device:MIDIOutput, sendMIDICC:Function, sendMIDIMessage:Function, sendMIDINoteOn:Function, sendMIDINoteOff:Function}{\n  const {midiOutputs, sendMIDICC, sendMIDIMessage, sendMIDINoteOn, sendMIDINoteOff} = useMIDIContext();\n  let device:MIDIOutput;\n  if (typeof (requestedDevice) == 'number') device = midiOutputs[requestedDevice];\n  else device = midiOutputs.filter((device:MIDIOutput)=>(device.name === requestedDevice))[0];\n  if(typeof(device) === 'undefined') {\n    return {\n      device, \n      sendMIDICC:()=>{}, \n      sendMIDIMessage:()=>{}, \n      sendMIDINoteOn:()=>{}, \n      sendMIDINoteOff:()=>{}\n    }\n  };\n  return {\n    device,\n    sendMIDICC:(command:MIDICommand)=>{\n      sendMIDICC({device, ...command});\n    },\n    sendMIDIMessage:(command:MIDICommand)=>{\n      sendMIDIMessage({device, ...command});\n    },\n    sendMIDINoteOn:(command:MIDICommand)=>{\n      sendMIDINoteOn({device, ...command});\n    },\n    sendMIDINoteOff:(command:MIDICommand)=>{\n      sendMIDINoteOff({device, ...command});\n    },\n  }\n}\n\nfunction useMIDIInput(requestedDevice: number | string):MIDIInput{\n  const {midiInputs} = useMIDIContext();\n  let device:MIDIInput;\n  try{\n\n    if(typeof (requestedDevice) == 'number'){\n      device = midiInputs[requestedDevice];\n    }\n    else{\n      device = midiInputs.filter((device:MIDIInput)=>(device.name === requestedDevice))[0];\n    }\n    if(!('connection' in device)) throw new Error('no device');\n    if(device.connection == 'closed') device.open();\n    return device;\n  }catch(err){\n    return {\n      connection: 'disconnected',\n      id: 'err',\n      manufacturer: 'err',\n      name: 'err',\n      state: 'disconnected',\n      type: 'output',\n      open:()=>{},\n      close:()=>{},\n      version: '0',\n    }\n  }\n}\n\nfunction useMIDIActions(device?:MIDIOutput):{sendMIDICC:Function, sendMIDIMessage:Function, sendMIDINoteOn:Function, sendMIDINoteOff:Function}{\n  const {sendMIDICC, sendMIDIMessage, sendMIDINoteOn, sendMIDINoteOff} = useMIDIContext();\n  if(!device){\n    return {sendMIDICC, sendMIDIMessage, sendMIDINoteOn, sendMIDINoteOff};\n  }\n  return {\n    sendMIDICC:(command:MIDICommand)=>{\n      sendMIDICC({device, ...command});\n    },\n    sendMIDIMessage:(command:MIDICommand)=>{\n      sendMIDIMessage({device, ...command});\n    },\n    sendMIDINoteOn:(command:MIDICommand)=>{\n      sendMIDINoteOn({device, ...command});\n    },\n    sendMIDINoteOff:(command:MIDICommand)=>{\n      sendMIDINoteOff({device, ...command});\n    },\n  }\n}\n\n/**\n * @typedef MIDIOutput\n * @type {object}\n * @description Native js {@link https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput|MIDIOutput} object. Inherits properties from {@link https://developer.mozilla.org/en-US/docs/Web/API/MIDIPort|MIDIPort}\n * @property {string} id - the device id (\"output\" + it's order it the MIDIOutputList + 1)\n * @property {(\"open\"|\"closed\"|\"pending\")} connection - connection status of the device,\n * eg: whether it is being used by the app\n * @property {string} manufacturer - the device manufacturer if available, or an empty string\n * @property {} onstatechange - DLSKJFJLSKDNFLKSNDFLKNSDLFKNSDLKFNLSKDFNLSKDNFL\n * @property {(\"connected\"|\"disconnected\")} state - Indicates whether the device\n * is connected to the system\n * @property {\"output\"} type - the MIDIPort type (always output)\n * @property {string} version - version of the port, usually \"1.0\"\n */\n\nconst index = { MIDIProvider, useMIDI, useMIDIInput, useMIDIOutput, useMIDIActions };\n\nexport default index;\n\nexport { MIDIProvider, useMIDI, useMIDIInput, useMIDIOutput, useMIDIActions };\n"],"names":[],"mappings":";;AAAA;;AAEG;AAMH;;;;;;;;;AASG;AAEH,SAAS,yBAAyB,CAAC,IAAY,EAAA;AAC7C,IAAA,QAAO,IAAI;AACT,QAAA,MAAK,SAAS,GAAG,OAAO,IAAI,CAAC;AAC7B,QAAA,MAAK,QAAQ,GAAG,OAAO,IAAI,CAAC;AAC5B,QAAA,MAAK,YAAY,EACjB,QAAA,MAAK,IAAI,GAAG,OAAO,IAAI,CAAC;AACxB,QAAA,MAAK,eAAe,GAAG,OAAO,IAAI,CAAC;AACnC,QAAA,MAAK,eAAe,GAAG,OAAO,IAAI,CAAC;AACnC,QAAA,MAAK,iBAAiB,GAAG,OAAO,IAAI,CAAC;AACrC,QAAA,MAAK,YAAY,GAAG,OAAO,IAAI,CAAC;AAChC,QAAA,SAAS,OAAO,IAAI,CAAC;AACtB,KAAA;AACH,CAAC;AA2CD,SAAS,eAAe,CAAC,KAAkB,EAAA;AACzC,IAAA,MAAM,EACJ,OAAO,EACP,EAAE,EACF,KAAK,EACL,KAAK,EACL,MAAM,EACN,IAAI,GAAC,IAAI,EACT,GAAG,GACJ,GAAG,KAAK,CAAC;AAEV,IAAA,MAAM,eAAe,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC;AACxD,IAAA,MAAM,WAAW,GAAG,eAAe,IAAI,OAAO,KAAP,IAAA,IAAA,OAAO,KAAP,KAAA,CAAA,GAAA,OAAO,GAAI,CAAC,CAAC,CAAC;AACrD,IAAA,MAAM,GAAG,GAAG,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;AAC1D,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,IAAI,MAAM,CAAC,WAAW,KAAK,KAAK,EAAE;AAChC,YAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,aAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACpC,OAAO,CAAA,iDAAA,EAAoD,GAAG,CAAA,CAAE,CAAC;AAClE,SAAA;AACD,QAAA,IAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC;YACxB,IAAG;AACD,gBAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClB,aAAA;AAAA,YAAA,OAAM,KAAK,EAAC;AACX,gBAAA,IAAG,GAAG;AAAE,oBAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5B,gBAAA,OAAO,mBAAmB,CAAA;AAC3B,aAAA;YACD,OAAO,CAAA,iCAAA,EAAoC,GAAG,CAAA,CAAE,CAAC;AAClD,SAAA;AACF,KAAA;AACD,IAAA,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AAED;;;AAGG;AACH,SAAS,aAAa,CAAC,KAAe,EAAA;IACpC,IAAI,GAAG,GAAG,EAAE,CAAC;AACb,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC7C,QAAA,GAAG,IAAI,CAAA,EAAA,EAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC;AAC3C,KAAA;AACD,IAAA,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC;AAC/D,CAAC;AAYD,eAAe,aAAa,CAAE,KAA2C,EAAA;AACvE,IAAA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;AAClC,IAAA,IAAI,QAAQ,KAAK,CAAC,KAAK,QAAQ;AAAE,QAAA,OAAO,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;AACvE,IAAA,IAAI,KAAK,CAAC,UAAU,KAAK,MAAM,IAAI,CAAC,QAAQ;AAAE,QAAA,OAAO,KAAK,CAAC;AAC3D,IAAA,KAAK,CAAC,aAAa,GAAG,CAAC,GAAS,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC;AACxD,IAAA,IAAI,QAAQ,QAAQ,CAAC,KAAK,UAAU,EAAE;AACpC,QAAA,MAAM,EAAE,GAAG,CAAC,GAAS,KAAI;AACvB,YAAA,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,EAAE,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;YACjE,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACrB,SAAC,CAAC;AACF,QAAA,KAAK,CAAC,aAAa,GAAG,CAAC,GAAS,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;AAC9C,KAAA;AACD,IAAA,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;AACnB,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;AAIG;AACH,eAAe,cAAc,CAAC,KAAe,EAAA;AAC3C,IAAA,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;AACpB,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAyBD,MAAM,WAAW,GAAsB,aAAa,CAAC;IACnD,cAAc,EAAC,eAAY;IAC3B,aAAa,EAAC,eAAY;IAC1B,aAAa,EAAC,eAAY;IAC1B,eAAe,EAAC,eAAY;IAC5B,UAAU,EAAC,eAAY;IACvB,cAAc,EAAC,eAAY;IAC3B,eAAe,EAAC,eAAY;AAC5B,IAAA,UAAU,EAAC,EAAE;AACb,IAAA,UAAU,EAAC,EAAE;AACb,IAAA,WAAW,EAAC,EAAE;AACd,IAAA,mBAAmB,EAAC,EAAE;IACtB,YAAY,EAAC,eAAY;IACzB,eAAe,EAAC,eAAY;AAC5B,IAAA,oBAAoB,EAAC,EAAE;IACvB,uBAAuB,EAAC,eAAY;IACpC,aAAa,EAAC,eAAY;IAC1B,gBAAgB,EAAC,eAAY;AAC9B,CAAA,CAAC,CAAC;AAIH,SAAS,YAAY,GAAA;AACnB,IAAA,MAAM,KAAK,GAGR,MAAM,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;AAE3C,IAAA,MAAM,GAAG,GAAG,WAAW,CAAC,CAAC,KAAkE,KAAI;AAC7F,QAAA,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC,OAAO,CAAC;QACjC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;AACtC,QAAA,IAAI,MAAM,EAAE;AACV,YAAA,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,KAAI;gBAC9D,IAAI,OAAO,KAAK,MAAM,CAAC,OAAO,KAAK,OAAO,CAAC;AAAE,oBAAA,OAAO,KAAK,CAAC;gBAC1D,IAAI,EAAE,KAAK,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;AAAE,oBAAA,OAAO,KAAK,CAAC;AAC3C,gBAAA,OAAO,IAAI,CAAC;AACd,aAAC,CAAC,CAAC;AACJ,SAAA;AACD,QAAA,IAAG,CAAC,OAAO;YAAE,OAAO,KAAK,CAAC,OAAO,CAAC;AAClC,QAAA,IAAI,CAAC,EAAE;YAAE,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACjD,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;KAC7C,EAAC,EAAE,CAAC,CAAC;AACN,IAAA,MAAM,GAAG,GAAG,WAAW,CAAC,CAAC,KAAgE,KAAI;;QAC3F,KAAK,CAAC,OAAO,GAAG;AACd,YAAA,SAAS,EACJ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CAAC,OAAO,CAAC,SAAS,CAAA,EAAA,EAC1B,CAAC,KAAK,CAAC,OAAO,GAAC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CACzC,EAAA,EAAA,CAAC,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAE1B,CAAA,EAAA,CAAA;AACD,YAAA,QAAQ,EACH,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CACzB,EAAA,EAAA,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,GACX,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA,EAAA,EAC1C,CAAC,KAAK,CAAC,OAAO,GACT,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,GAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC,OAAO,CAAC,CAAA,EAAA,EAC3D,CAAC,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAG5B,CAAA,EAAA,CAAA,EAAA,CAAA;SACF,CAAC;KACH,EAAC,EAAE,CAAC,CAAC;IACN,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;AAEtC,IAAA,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,QAAiB,KAAI;AAClD,QAAA,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAClC,OAAO,MAAM,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACpD,KAAC,EAAC,CAAC,WAAW,CAAC,CAAC,CAAC;IAEjB,OAAO;QACL,GAAG;QACH,GAAG;QACH,SAAS;KACV,CAAC;AACJ,CAAC;AAGD,SAAS,YAAY,CAAC,KAAgC,EAAA;AACpD,IAAA,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;AAE3B,IAAA,SAAS,OAAO,CAAC,KAA8C,EAAE,MAAU,EAAA;QACzE,QAAQ,MAAM,CAAC,IAAI;AACjB,YAAA,KAAK,KAAK;AACR,gBAAA,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAChD,YAAA,KAAK,QAAQ;gBACX,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE,YAAA;gBACE,MAAM,IAAI,KAAK,EAAE,CAAC;AACrB,SAAA;KACF;AAED,IAAA,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAC9E,IAAA,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAChF,IAAA,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,YAAY,EAAE,CAAC;IAE3E,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACnD,SAAS,CAAC,MAAI;AACZ,QAAA,cAAc,EAAE,CAAC;KAClB,EAAE,EAAE,CAAC,CAAA;AAEN;;;AAGC;AAEH,IAAA,eAAe,cAAc,GAAA;AAC3B,QAAA,IAAI,EAAE,mBAAmB,IAAI,SAAS,CAAC;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC;;AAEpH,QAAA,MAAM,cAAc,GAAG,MAAM,SAAS,CAAC,iBAAiB,EAAE,CAAC;AAC3D,QAAA,aAAa,CAAC,MAAI,cAAc,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAEvE,QAAA,aAAa,CAAC,MAAI,SAAS,CAAC,CAAC;QAC7B,MAAM,UAAU,GAAG,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAE3E,QAAA,cAAc,CAAC,MAAI,UAAU,CAAC,CAAC;AAC/B,QAAA,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC;KAChD;AAGC;;;AAGG;IACH,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,KAAgB,EAAE,QAAmB,KAAqB;QAChG,IAAI;AACF,YAAA,IAAG,EAAE,QAAQ,IAAI,UAAU,CAAC;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;YACvE,MAAM,aAAa,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAC;YACvC,sBAAsB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AACtD,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;KACF,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,mBAAmB,CAAC,CAAC,CAAC;AAElD;;;AAGG;AAEH,IAAA,MAAM,eAAe,GAAG,WAAW,CAAC,CAAC,KAAe,KAAY;QAC9D,IAAI;YACF,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,sBAAsB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AACzD,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;KACF,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,mBAAmB,CAAC,CAAC,CAAC;AAElD;;;AAGG;AAEH,IAAA,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,MAAiB,KAAI;QACtD,IAAI;AACF,YAAA,IAAG,EAAE,SAAS,IAAI,UAAU,CAAC;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;AACxE,YAAA,eAAe,CAAC,EAAC,MAAM,EAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAC,CAAC,EAAC,CAAC,CAAA;YACrD,uBAAuB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;AACxD,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;KACF,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;AAEpD;;;AAGG;AAEH,IAAA,MAAM,gBAAgB,GAAG,WAAW,CAAC,CAAC,MAAiB,KAAI;QACzD,IAAI;YACF,uBAAuB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;AAC3D,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;KACF,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;AAEpD;;;;;;AAMG;AAEH,IAAA,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,IAAiE,KAAI;QACnG,MAAM,EACJ,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,GAC3B,GAAG,IAAI,CAAC;AACT,QAAA,IAAI,QAAO,OAAO,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,8DAA8D,OAAO,CAAA,CAAE,CAAC,CAAC;AAC3H,QAAA,IAAI,QAAO,EAAE,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0DAA0D,EAAE,CAAA,CAAE,CAAC,CAAC;AAC7G,QAAA,IAAI,QAAO,KAAK,CAAC,KAAI,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,4DAA4D,KAAK,CAAA,CAAE,CAAC,CAAC;AACpH,QAAA,IAAI,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,uEAAuE,MAAM,CAAA,CAAE,CAAC,CAAC;AAC9G,QAAA,eAAe,CAAC;YACd,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI;AACvC,SAAA,CAAC,CAAC;AACH,QAAA,YAAY,CAAC;AACX,YAAA,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM;AAC3B,SAAA,CAAC,CAAC;AACL,KAAC,EAAE,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC,CAAC;AAE5C;;;;;;;AAOG;AAEH,IAAA,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,IAAuF,KAAI;AAC7H,QAAA,MAAM,EACJ,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,GACxC,GAAG,IAAI,CAAC;AACT,QAAA,IAAI,QAAO,OAAO,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,kEAAkE,OAAO,CAAA,CAAE,CAAC,CAAC;AAC/H,QAAA,IAAI,QAAO,KAAK,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,gEAAgE,KAAK,CAAA,CAAE,CAAC,CAAC;AACzH,QAAA,IAAI,QAAO,QAAQ,CAAC,KAAK,QAAQ,IAAI,QAAO,KAAK,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,sEAAA,EAAyE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAR,QAAQ,GAAI,KAAK,CAAA,CAAE,CAAC,CAAC;AAC/K,QAAA,IAAI,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,2EAA2E,MAAM,CAAA,CAAE,CAAC,CAAC;AAClH,QAAA,eAAe,CAAC;AACd,YAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAK,GAAI,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ;AACjE,SAAA,CAAC,CAAC;AACL,KAAC,EAAE,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC,CAAC;AAE5C;;;;;AAKG;AACH,IAAA,MAAM,eAAe,GAAG,WAAW,CAAC,CAAC,IAAsD,KAAI;QAC7F,MAAM,EACJ,OAAO,EAAE,KAAK,EAAE,MAAM,GACvB,GAAG,IAAI,CAAC;AACT,QAAA,IAAI,QAAO,OAAO,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,mEAAmE,OAAO,CAAA,CAAE,CAAC,CAAC;AAChI,QAAA,IAAI,QAAO,KAAK,CAAC,KAAK,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,iEAAiE,KAAK,CAAA,CAAE,CAAC,CAAC;AAC1H,QAAA,IAAI,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,4EAA4E,MAAM,CAAA,CAAE,CAAC,CAAC;AACnH,QAAA,eAAe,CAAC;YACd,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS;AAClD,SAAA,CAAC,CAAC;AACL,KAAC,EAAE,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC,CAAC;AAC5C,IAAA,MAAM,KAAK,GAAG,OAAO,CAAC,OAAmB;QACvC,cAAc;QACd,aAAa;QACb,aAAa;QACb,YAAY;QACZ,eAAe;QACf,UAAU;QACV,cAAc;QACd,eAAe;QACf,UAAU;QACV,UAAU;QACV,WAAW;QACX,mBAAmB;QACnB,YAAY;QACZ,eAAe;QACf,oBAAoB;QACpB,uBAAuB;QACvB,aAAa;QACb,gBAAgB;QAChB,SAAS;AACV,KAAA,CAAC,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,UAAU,CAAC,CAAC,CAAC;AACtF,IAAA,QACE,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAQ,EAAA,EAAC,KAAK,EAAE,KAAK,EAAA,EAC/B,QAAQ,CACY,EACvB;AACJ,CAAC;AAED,SAAS,cAAc,GAAA;AAmBrB,IAAA,OAAO,UAAU,CAAC,WAAW,CAAC,CAAA;AAChC,CAAC;AAeD,SAAS,OAAO,CAAC,KAAwD,EAAA;AACvE,IAAA,IAAI,CAAC,KAAK,IAAI,EAAE,SAAS,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,CAAC;QAAE,OAAO,cAAc,EAAE,CAAC;IACnG,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;AACtC,IAAA,MAAM,IAAI,GAAG,CAAC,KAAY,KAAI;AAC5B,QAAA,eAAe,CAAC;YACd,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,IAAI;AACtC,SAAA,CAAC,CAAC;AACL,KAAC,CAAC;IACF,OAAO;AACL,QAAA,eAAe,EAAE,IAAI;KACtB,CAAC;AACJ,CAAC;AAED,SAAS,aAAa,CAAC,eAAgC,EAAA;AACrD,IAAA,MAAM,EAAC,WAAW,EAAE,UAAU,EAAE,eAAe,EAAE,cAAc,EAAE,eAAe,EAAC,GAAG,cAAc,EAAE,CAAC;AACrG,IAAA,IAAI,MAAiB,CAAC;AACtB,IAAA,IAAI,QAAQ,eAAe,CAAC,IAAI,QAAQ;AAAE,QAAA,MAAM,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC;;QAC3E,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,MAAiB,MAAI,MAAM,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F,IAAA,IAAG,QAAO,MAAM,CAAC,KAAK,WAAW,EAAE;QACjC,OAAO;YACL,MAAM;AACN,YAAA,UAAU,EAAC,MAAI,GAAE;AACjB,YAAA,eAAe,EAAC,MAAI,GAAE;AACtB,YAAA,cAAc,EAAC,MAAI,GAAE;AACrB,YAAA,eAAe,EAAC,MAAI,GAAE;SACvB,CAAA;AACF,KAAA;IACD,OAAO;QACL,MAAM;AACN,QAAA,UAAU,EAAC,CAAC,OAAmB,KAAG;AAChC,YAAA,UAAU,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SAClC;AACD,QAAA,eAAe,EAAC,CAAC,OAAmB,KAAG;AACrC,YAAA,eAAe,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACvC;AACD,QAAA,cAAc,EAAC,CAAC,OAAmB,KAAG;AACpC,YAAA,cAAc,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACtC;AACD,QAAA,eAAe,EAAC,CAAC,OAAmB,KAAG;AACrC,YAAA,eAAe,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACvC;KACF,CAAA;AACH,CAAC;AAED,SAAS,YAAY,CAAC,eAAgC,EAAA;AACpD,IAAA,MAAM,EAAC,UAAU,EAAC,GAAG,cAAc,EAAE,CAAC;AACtC,IAAA,IAAI,MAAgB,CAAC;IACrB,IAAG;AAED,QAAA,IAAG,QAAQ,eAAe,CAAC,IAAI,QAAQ,EAAC;AACtC,YAAA,MAAM,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;AACtC,SAAA;AACG,aAAA;YACF,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,MAAgB,MAAI,MAAM,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtF,SAAA;AACD,QAAA,IAAG,EAAE,YAAY,IAAI,MAAM,CAAC;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AAC3D,QAAA,IAAG,MAAM,CAAC,UAAU,IAAI,QAAQ;YAAE,MAAM,CAAC,IAAI,EAAE,CAAC;AAChD,QAAA,OAAO,MAAM,CAAC;AACf,KAAA;AAAA,IAAA,OAAM,GAAG,EAAC;QACT,OAAO;AACL,YAAA,UAAU,EAAE,cAAc;AAC1B,YAAA,EAAE,EAAE,KAAK;AACT,YAAA,YAAY,EAAE,KAAK;AACnB,YAAA,IAAI,EAAE,KAAK;AACX,YAAA,KAAK,EAAE,cAAc;AACrB,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAC,MAAI,GAAE;AACX,YAAA,KAAK,EAAC,MAAI,GAAE;AACZ,YAAA,OAAO,EAAE,GAAG;SACb,CAAA;AACF,KAAA;AACH,CAAC;AAED,SAAS,cAAc,CAAC,MAAkB,EAAA;AACxC,IAAA,MAAM,EAAC,UAAU,EAAE,eAAe,EAAE,cAAc,EAAE,eAAe,EAAC,GAAG,cAAc,EAAE,CAAC;IACxF,IAAG,CAAC,MAAM,EAAC;QACT,OAAO,EAAC,UAAU,EAAE,eAAe,EAAE,cAAc,EAAE,eAAe,EAAC,CAAC;AACvE,KAAA;IACD,OAAO;AACL,QAAA,UAAU,EAAC,CAAC,OAAmB,KAAG;AAChC,YAAA,UAAU,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SAClC;AACD,QAAA,eAAe,EAAC,CAAC,OAAmB,KAAG;AACrC,YAAA,eAAe,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACvC;AACD,QAAA,cAAc,EAAC,CAAC,OAAmB,KAAG;AACpC,YAAA,cAAc,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACtC;AACD,QAAA,eAAe,EAAC,CAAC,OAAmB,KAAG;AACrC,YAAA,eAAe,CAAE,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,EAAE,CAAC;SACvC;KACF,CAAA;AACH,CAAC;AAED;;;;;;;;;;;;;AAaG;AAEH,MAAM,KAAK,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc;;;;"}